pipeline {
    agent any
	parameters {
        choice(choices: ['Dev', 'Release'], description: 'Please choose the build configuration?', name: 'configuration')
        choice(choices: ['Manual', 'Auto'], description: 'Auto deployment?', name: 'autoDeploy')
		choice(choices: ['No', 'Yes'], description: 'Include dependencies?', name: 'dependencies')
		string(defaultValue: "172.16.10.2", description: 'What is your server ip?', name: 'ip')
		string(defaultValue: "22", description: 'What is your server port?', name: 'port')
		string(defaultValue: "", description: 'What is your user?', name: 'user')
		string(defaultValue: "", description: 'What is your password?', name: 'password')
    }
    stages {
		stage('Build') {
			steps {
				cleanWs()
				checkout scm
				echo "Build Version ${BRANCH_NAME.replace("branches/", "")}"
				script {
					def uiVersion = "ITS3_V${BRANCH_NAME.replace("branches/", "")}_${SVN_REVISION}"
					def packageVersion = uiVersion
					if(params.configuration == "Dev"){
						packageVersion = "${uiVersion}_Dev"
					}
					echo "${uiVersion}";
					echo "${packageVersion}";
					sh "sed -i \'s/_version_/${uiVersion}/g\' \'${WORKSPACE}/dev/Code_Base/TSLIB/resources/ui_manager.xml\'"
					sh '''cd ${WORKSPACE}/dev
sudo python3.4 setup.py bdist_egg'''
					sh "cp -r ${WORKSPACE}/dev/dist/ ${WORKSPACE}/${packageVersion}"
					if(params.configuration == "Release"){
						sh "cp -r ${WORKSPACE}/document ${WORKSPACE}/${packageVersion}/document"
					}
					sh "cp -r ${WORKSPACE}/config ${WORKSPACE}/${packageVersion}/config"
					sh "cd ${WORKSPACE}/${packageVersion}; find . -type d -name .svn -print0|xargs -0 rm -rf"
					sh "cd ${WORKSPACE}/; zip -r ${packageVersion}.zip ./${packageVersion}"
					ftpPublisher alwaysPublishFromMaster: false, continueOnError: false, failOnError: false, publishers: [[configName: 'FPT ITS3 Software', transfers: [[asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: "${packageVersion}.zip"]], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false]]
				}
			}
		}
		stage('Deployment') {
			steps{
				script {
					def ip = params.ip;
					def user = params.user;
					def password = params.password;
					def port = params.port;
					if(params.autoDeploy == "Auto"){
						if(params.dependencies == "Yes")
						{
							sh "cd ${WORKSPACE};chmod 777 ./deploy-dependencies.sh; ./deploy-dependencies.sh '${ip}' '${user}' '${password}' '${port}' '/tmp' 'dependencies.sh' './dev/dist/ITS3-distribution-py3.4.egg'"
						}						
						sh "cd ${WORKSPACE};chmod 777 ./deploy-package.sh; ./deploy-package.sh '${ip}' '${user}' '${password}' '${port}' '/tmp' 'dependencies.sh' './dev/dist/ITS3-distribution-py3.4.egg'"
					} else{
						echo "Ignore auto deployment"
					}
				}
			}
		}
		stage('Clean Workspace') {
			steps {
				cleanWs()
			}
		}
	}
}